Date: Thu, 4 May 2000 11:50:03 +0200
From: Albert Shih <jas@math.jussieu.fr>
To: Paul Zimmermann <Paul.Zimmermann@loria.fr>
Subject: Re: GMP 3.0.1 sur AMD K7
Content-Type: text/plain; charset=iso-8859-1
In-Reply-To: <200005040931.LAA07858@leibniz.loria.fr>; from Paul.Zimmermann@loria.fr on Thu, May 04, 2000 at 11:31:30AM +0200

 Le 04/05/2000 à 11:31:30+0200, Paul Zimmermann a écrit
> Ok il semble qu'il y ait encore des pbs.

Y'a pas de pbs.

> Mais je ne vais pas t'embe^ter plus longtemps avec l'install.

Le truc sympa pour les testeur-nul c'est d'avoir un 
./configure
make
make test > resultat.test

> isabelle(zimmerma): ./timings-mpfr 10000 100
> ...
> 

[jas@mercure tests]$ ./timings-mpfr 100 10000        
prec=333
x*y took 1.50e-03ms
x/y took 5.50e-03ms
sqrt(x) took 8.60e-03ms
exp(x) took 1.19e-01ms
log(x) took 2.24e-01ms
[jas@mercure tests]$ ./timings-mpfr 1000 1000         
prec=3322
x*y took 3.10e-02ms
x/y took 1.01e-01ms
sqrt(x) took 7.80e-02ms
exp(x) took 6.10e+00ms
log(x) took 6.36e+00ms
[jas@mercure tests]$ ./timings-mpfr 10000 100  
prec=33220
x*y took 1.49e+00ms
x/y took 3.44e+00ms
sqrt(x) took 2.57e+00ms
exp(x) took 5.85e+02ms
log(x) took 1.22e+02ms
[jas@mercure tests]$ 


Je ne sais pas si cela t'interesse :

[jas@mercure jas]$ maple <timings.mpl 
    |\^/|     Maple V Release 5.1 (UFR P7)
._|\|   |/|_. Copyright (c) 1981-1998 by Waterloo Maple Inc. All rights
 \  MAPLE  /  reserved. Maple and Maple V are registered trademarks of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> kernelopts(printbytes=false): # thanks to Dave Hare
> readlib(`evalf/exp`): readlib(`evalf/ln`): # thanks to Dave Hare, again
> 
# 100 digits
> Digits:=100: x:=sqrt(3.0): y:=sqrt(5.0):
> 
> N:=100000:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x*y od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     .0238

> 
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x/y od: st:=time()-st: 
> evalf(1000*(st-st0)/N, 3);
                                     .0915

> 
> N:=10000:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x^(1/2) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     .184

> 
> N:=1000:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do `evalf/exp`(x) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     .830

> 
> N:=1000:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do `evalf/ln`(x) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     1.31

> 
# 1000 digits
> Digits:=1000: x:=sqrt(3.0): y:=sqrt(5.0):
> 
> N:=1000:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x*y od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     .626

> 
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x/y od: st:=time()-st: 
> evalf(1000*(st-st0)/N, 3);
                                     6.78

> 
> N:=1000:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x^(1/2) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     9.16

> 
> N:=100:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do `evalf/exp`(x) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     31.9

> 
> N:=100:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do `evalf/ln`(x) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     41.2

> 
# 10000 digits
> Digits:=10000: x:=sqrt(3.0): y:=sqrt(5.0):
> 
> N:=10:
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x*y od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     21.8

> 
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x/y od: st:=time()-st: 
> evalf(1000*(st-st0)/N, 3);
                                     658.

> 
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do x^(1/2) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     849.

> 
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do `evalf/exp`(x) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     3250.

> 
> st0:=time(): to N do od: st0:=time()-st0:
> st:=time(): to N do `evalf/ln`(x) od: st:=time()-st:
> evalf(1000*(st-st0)/N, 3);
                                     3380.

> quit



Amicalement

JAS
-- 
Albert SHIH
Universite de Paris 7 (Denis DIDEROT)
U.F.R. de Mathematiques.
7 ième étage, plateau D, bureau 10
Tel    : 01 44 27 86 88
GSM (Temporaire) : 06 85 05 58 43
